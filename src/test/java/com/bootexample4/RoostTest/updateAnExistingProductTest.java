/*
Test generated by RoostGPT for test Integration-RestAssuredTest using AI Type Open AI and AI Model gpt-4

{
  background: null,
  rule: null,
  scenario: 'Update an existing product\r\n' +
    '    Given there is an existing product with ID 1\r\n' +
    '    And the client provides the following product data:\r\n' +
    '      | name           | description                      | price |\r\n' +
    '      | Updated Product | This is an updated test product. | 15.0  |\r\n' +
    '    When the client sends a PUT request to "/api/products/1"\r\n' +
    '    Then the product with ID 1 should be updated with the provided details',
  title: 'Update an existing product'
}

*/
package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class updateAnExistingProductTest {

    @BeforeAll
    public static void setup() {
        RestAssured.baseURI = System.getenv("ROOST_SERVER_URL");
    }

    @Test
    public void updateExistingProduct() {
        Map<String, Object> payload = new HashMap<>();
        payload.put("name", "Updated Product");
        payload.put("description", "This is an updated test product.");
        payload.put("price", 15.0);

        // Scenario: Update an existing product
        // Given there is an existing product with ID 1
        // And the client provides the following product data:
        // | name           | description                      | price |
        // | Updated Product | This is an updated test product. | 15.0  |
        // When the client sends a PUT request to "/api/products/1"
        // Then the product with ID 1 should be updated with the provided details

        Response response = given()
                .contentType(ContentType.JSON)
                .body(payload)
                .when()
                .put("/api/products/1");

        response.then()
                .statusCode(200)
                .body("id", equalTo(1))
                .body("name", equalTo("Updated Product"))
                .body("description", equalTo("This is an updated test product."))
                .body("price", equalTo(15.0f));
    }
}

/*
Test generated by RoostGPT for test metering-integration using AI Type Open AI and AI Model gpt-4

{
  background: null,
  rule: null,
  scenario: 'List Metering Label Rules\n' +
    '    When I send a GET request to "/v2.0/metering/metering-label-rules"\n' +
    '    Then the response status code should be 200\n' +
    '    And the response should be in JSON\n' +
    '    And the response should contain the following metering label rules:\n' +
    '      | remote_ip_prefix | direction | metering_label_id                        | id                                   | excluded |\n' +
    '      | 20.0.0.0/24      | ingress   | e131d186-b02d-4c0b-83d5-0c0725c4f812   | 9536641a-7d14-4dc5-afaf-93a973ce0eb8 | false    |\n' +
    '      | 10.0.0.0/24      | ingress   | e131d186-b02d-4c0b-83d5-0c0725c4f812   | ffc6fd15-40de-4e7d-b617-34d3f7a93aec | false    |',
  title: 'List Metering Label Rules'
}

*/
package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class listMeteringLabelRulesTest {

    @BeforeAll
    public static void setBaseUri () {
        RestAssured.baseURI = System.getenv("ROOST_SERVER_URL") + "/v2.0/metering";
    }

    @Test
    public void testListMeteringLabelRules() {
        // Send a GET request to "/v2.0/metering/metering-label-rules"
        Response response = given()
                .contentType(ContentType.JSON)
                .when()
                .get("/metering-label-rules");

        // Validate the response status code is 200
        response.then().statusCode(200);

        // Validate the response is in JSON format
        response.then().contentType(ContentType.JSON);

        // Validate the response contains the expected metering label rules
        response.then().body("remote_ip_prefix", hasItems("20.0.0.0/24", "10.0.0.0/24"));
        response.then().body("direction", hasItems("ingress"));
        response.then().body("metering_label_id", hasItems("e131d186-b02d-4c0b-83d5-0c0725c4f812"));
        response.then().body("id", hasItems("9536641a-7d14-4dc5-afaf-93a973ce0eb8", "ffc6fd15-40de-4e7d-b617-34d3f7a93aec"));
        response.then().body("excluded", hasItems(false));
    }
}

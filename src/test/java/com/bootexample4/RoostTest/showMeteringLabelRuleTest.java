/*
Test generated by RoostGPT for test metering-integration using AI Type Open AI and AI Model gpt-4

{
  background: null,
  rule: null,
  scenario: 'Show Metering Label Rule\n' +
    '    When I send a GET request to "/v2.0/metering/metering-label-rules/9536641a-7d14-4dc5-afaf-93a973ce0eb8"\n' +
    '    Then the response status code should be 200\n' +
    '    And the response should be in JSON\n' +
    '    And the response should contain the metering label rule:\n' +
    '      | remote_ip_prefix | direction | metering_label_id                        | id                                   | excluded |\n' +
    '      | 20.0.0.0/24      | ingress   | e131d186-b02d-4c0b-83d5-0c0725c4f812   | 9536641a-7d14-4dc5-afaf-93a973ce0eb8 | false    |',
  title: 'Show Metering Label Rule'
}

*/
package com.bootexample4.RoostTest;

import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;

public class showMeteringLabelRuleTest {

    @Test
    public void showMeteringLabelRule() {
        // Scenario: Show Metering Label Rule
        given()
            .baseUri(System.getenv("ROOST_SERVER_URL"))
            .basePath("/v2.0/metering/metering-label-rules")
        .when()
            .get("/9536641a-7d14-4dc5-afaf-93a973ce0eb8")
        .then()
            .assertThat()
            .statusCode(200)
            .contentType("application/json")
            .body("remote_ip_prefix", equalTo("20.0.0.0/24"))
            .body("direction", equalTo("ingress"))
            .body("metering_label_id", equalTo("e131d186-b02d-4c0b-83d5-0c0725c4f812"))
            .body("id", equalTo("9536641a-7d14-4dc5-afaf-93a973ce0eb8"))
            .body("excluded", equalTo(false));
    }
}

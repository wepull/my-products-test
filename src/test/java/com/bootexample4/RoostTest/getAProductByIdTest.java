/*
Test generated by RoostGPT for test Integration-RestAssuredTest using AI Type Open AI and AI Model gpt-4

{
  background: null,
  rule: null,
  scenario: 'Get a product by ID\r\n' +
    '    Given there is an existing product with ID 1\r\n' +
    '    When the client sends a GET request "/api/products/1" to get a product by its id\r\n' +
    '    Then the response status code should be 200\r\n' +
    '    And the response should contain the product with ID 1',
  title: 'Get a product by ID'
}

*/
package com.bootexample4.RoostTest;

import org.junit.jupiter.api.Test;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import org.junit.jupiter.api.BeforeEach;

public class getAProductByIdTest {

    @BeforeEach
    public void setup() {
        RestAssured.baseURI = System.getenv("ROOST_SERVER_URL");
        RestAssured.basePath = "/api";
    }

    @Test
    public void getAProductById() {
        // Given there is an existing product with ID 1
        int productId = 1;

        // When the client sends a GET request "/api/products/1" to get a product by its id
        Response response = given()
            .contentType(ContentType.JSON)
            .pathParam("productId", productId)
            .when()
            .get("/products/{productId}");

        // Then the response status code should be 200
        response.then().statusCode(200);

        // And the response should contain the product with ID 1
        response.then().body("id", equalTo(productId));
        response.then().body("name", is(notNullValue()));
        response.then().body("description", is(notNullValue()));
        response.then().body("price", is(notNullValue())); 
    }
}
